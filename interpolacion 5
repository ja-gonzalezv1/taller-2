import pandas as pd
import numpy as np
import sympy as sp
import matplotlib.pyplot as plt

datos= pd.read_csv("https://raw.githubusercontent.com/asegura4488/Database/main/MetodosComputacionalesReforma/InterpolacionNewtonNoequi.csv", dtype= float)
X= np.float64(datos.X)
Y= np.float64(datos.Y)

ms= np.zeros((len(Y)))
hs= np.zeros((len(Y)-1))
x = np.linspace(0,6,100)



def EncontrarTodasPendientes(X, Y):
    pendientes= []
    for i in range(1, len(X)):
        pendiente = (Y[i] - Y[i-1]) / (X[i] - X[0])
        pendientes.append(pendiente)
    return pendientes

pendientes= EncontrarTodasPendientes(X, Y)


def PendientePolinomio(pendientes, m):
    pens= pendientes[0:m]
    n= len(pens)
    if m == 1:
        return pendientes[0]
    for i in range(1, n):
        n= len(pens)
        pen= []
        indices = np.linspace(0, n-1, n)
        for j in indices:
            if j > 0:
                entrada = pens[int(j)] - pens[int(j)-1]
                p = entrada / (x[n] - x[0])
                pen.append(p)
        pens = pen
    return pens[0]


def polinomio(x, y, X):
    ps= [y[0]]
    for i in range(1, len(x)):
        m= PendientePolinomio(pendientes, i)
        h= 1
        for j in range(1, i+1):
            print(j)
            h *= (X - x[j-1])
        p= m*h
        ps.append(p)
    return sum(ps)

y= polinomio(X,Y,x)

plt.plot(x,y)
plt.scatter(X,Y)
